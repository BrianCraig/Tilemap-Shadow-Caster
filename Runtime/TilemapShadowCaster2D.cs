using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using System.Collections;

namespace TilemapShadowCaster.Runtime
{
    [DisallowMultipleComponent]
    [AddComponentMenu("Rendering/2D/Tilemap Shadow Caster")]
    public class TilemapShadowCaster2D : MonoBehaviour
    {
        [SerializeField] private uint colliderHash;
        [SerializeField] private bool m_SelfShadows = false;
        [SerializeField] private int m_ApplyToSortingLayers = -1;
        [Range(1,128)]
        [SerializeField] private int m_MaxNumOfShadows = 8;
        [Range(1,8)]
        [SerializeField] private int updatesPerSecond = 2;
        private Camera mainCamera;
        List<PathShadow> shadows;
        private CompositeCollider2D tilemapCollider;

        private void Awake()
        {
            StartCoroutine("UpdateShadows");
        }

        private void Initialice()
        {
            shadows = new List<PathShadow>();
            mainCamera = Camera.main;
            tilemapCollider = GetComponent<CompositeCollider2D>();
            ReinitializeShapes();
        }

        IEnumerator UpdateShadows()
        {
            Initialice();

            float updateTime = 1 / updatesPerSecond;
            float timer = 0;
            while (true)
            {
                timer += Time.deltaTime;
                if (timer > updateTime)
                {
                    ReinitialiceShapes(tilemapCollider);
                    timer -= updateTime;
                }
                yield return null;
            }
        }

        private int[] getLayers(){
            int[] values = SortingLayer.layers.Select(l => l.id).ToArray();
            List<int> sortingLayers = new List<int>();
            for (int i = 0; i < values.Length; i++)
            {
                int layer = 1 << i;
                if ((m_ApplyToSortingLayers & layer) != 0)
                    sortingLayers.Add(values[i]);
            }
            int[] layerArray = sortingLayers.ToArray();
            return layerArray;
        }

        private List<List<Vector2>> GetClosestColliders(CompositeCollider2D collider)
        {
            List<List<Vector2>> points = new List<List<Vector2>>();
            for (int i = 0; i < collider.pathCount; i++)
            {
                points.Add(new List<Vector2>());
                collider.GetPath(i, points[i]);
            }

            points = points.OrderBy(x => Vector2.Distance(x[0], mainCamera.transform.position)).Take(m_MaxNumOfShadows).ToList();

            return points;
        }

        private void InitiliceShapes(CompositeCollider2D collider)
        {
            List<List<Vector2>> points = GetClosestColliders(collider);
            int[] layers = getLayers();
            foreach (var point in points)
            {
                GameObject go = new GameObject("AutogeneratedShadowPath", typeof(MeshRenderer));
                go.transform.parent = transform;
                PathShadow path = go.AddComponent<PathShadow>();
                if (shadows == null) shadows = new List<PathShadow>();
                shadows.Add(path);
                path.useRendererSilhouette = false;
                path.selfShadows = m_SelfShadows;
                path.SetShape(point, layers);
            }
        }

        private void ReinitialiceShapes(CompositeCollider2D collider)
        {
            List<List<Vector2>> points = GetClosestColliders(collider);
            for (int i = 0; i < points.Count; i++)
            {
                shadows[i].useRendererSilhouette = false;
                shadows[i].selfShadows = m_SelfShadows;
                shadows[i].SetShape(points[i], getLayers());
            }
        }

        public void RemoveCurrentShadows()
        {
            new List<PathShadow>(GetComponentsInChildren<PathShadow>())
                .ConvertAll(comp => comp.transform.gameObject)
                .ForEach(gameObject =>
                {
                    if (Application.isEditor)
                    {
                        DestroyImmediate(gameObject);
                    }
                    else
                    {
                        Destroy(gameObject);
                    }
                });
        }

        public void ReinitializeShapes()
        {
            mainCamera = Camera.main; //Needed for running in the editor
            RemoveCurrentShadows();
            InitiliceShapes(GetComponent<CompositeCollider2D>());
        }

        public void OnDestroy()
        {
            RemoveCurrentShadows();
        }
    }

}